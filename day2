#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//逻辑与&&，逻辑或||
int main()
{
	int a = 3;
	int b = 5;
	int c = a && b;
	printf("c=%d\n", c);//真非0，假0
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//条件操作符
//exp1?exp2:exp3;
int main()
{
	int a = 3;
	int b = 5;
	int max = 0;
	max = (a > b ? a : b);
	printf("最大值%d\n", max);
	return 0;
}


//类型定义typedef——类型重定义
//typedef unsigned int=u_int;
// u_int=20;等价于
//unsigned int num=2;


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//void
void test()
{
	int a = 1;
	a++;
	printf("a=%d\n", a);
}
int main()
{
	int i = 0;
	while (i < 5)
	{
		test();
		i++;
	}
	return 0;//五次循环，结果都为a=1
}


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//void
void test()
{
	static int a = 1;//a是一个静态的局部变量,static修饰局部变量，局部变量生命周期变长
	a++;
	printf("a=%d\n", a);
}
int main()
{
	int i = 0;
	while (i < 5)
	{
		test();
		i++;
	}
	return 0;//五次循环，结果a=23456
}


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//extern——声明外部符号
int main()
{
	extern int a ;
	printf("外部文件里的全局变量为%d\n", a);//可调用外部文件里的全局变量
	return 0;
}
//static修饰局部变量，局部变量生命周期变长
//static修饰全局变量，改变了变量的作用域——让静态的全局变量只能在自己所在的源文件内部使用，出了源文件就没法使用了
//static修饰函数，改变了函数的链接属性，普通函数具有外部链接属性，加上static，函数只具有内部链接属性


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//#define定义标识符常量 
//#define c 10;即为c=10
//#define定义宏-带参数
#define max(x,y)(x>y?x:y)
int main()
{
	int a=10;
	int b= 20;
	int max = 0;
	max = max(a, b);
	printf("max=%d\n", max);
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//指针
int main()
{
	int a=10;
	int* p = &a;//取地址,int*为p的类型
	//有一种变量是用来存放地址的，称为指针变量
	printf("地址为%p\n", &a);//输出为16进制	
	printf("地址为%p\n", p);//结果同上
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//指针
int main()
{
	int a=10;
	int* p = &a;//取a的地址,int*为p的类型
	*p = 20;//*为解引用操作符,在原来a的位置，赋值20
	printf("%d\n", a);//输出20
	return 0;
}


#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
//指针大小在32位平台上是4个字节，64位平台上是8个字节
int main()
{
	int a=10;
	int* p = &a;//取a的地址,int*为p的类型
	printf("%d\n", sizeof(p));//计算字节
	return 0;
}

